X[1]<-X[1]+X[6]
X[1]
X[6]+X[X[11]]
X[2]
X[10]<-X[10]-2
X[1]
X<-c(8,6,5,7,3,2,2,11,10,-2,4,1)
X<-c(8,6,5,7,3,2,2,11,10,-2,4,1)
X[11]<-X[11]+1
X[10]<-X[1]
X[1]
X[X[6]]
X[11]<-X[5]+X[11]
X[6]
X[1]
X[8]
X[11]
X<-c(8,6,5,7,3,2,2,11,10,-2,4,1)
X[11]<-X[11]+1
X[10]<-X[1]
#Ir a instrucciÃ³n 6
X[11]<-X[5]+X[11]
X[12]+1
10-X[12]
X[8]
X[11]
x<-c(12,7,0,2,3,19,6,0,1,72,-3,9)
X[12]<-X[12]-X[12]
9-2
x<-c(12,7,0,2,3,19,6,0,1,72,-3,9)
X[9]<-X[12]-X[12]
X[7]<-X[12]-X[12]
X[9]
5+2+8+11
x<-c(12,7,0,2,3,19,6,0,1,72,-3,9)
X[9]<-X[12]-X[12]
X[7]
X[9]
X<-c(2,3,1,5,7,6,21,7,11,9,0,2)
X[11]<-X[3]+X[11]
X[5] <-X[1]+X[X[9]]
X[12]<-X[12]*X[12]
if (X[5]==X[10]){
X[8]<-X[7]-X[5]
X[6]<-X[12]+X[8]
}else{
X[12]<-X[12]-2
X[5]<-X[2]-X[5]
}
X[6]
X<-c(-8,13,1,6,2,5,13,6,4,7,5,2,6,7,9)
X[1]<-X[4]-X[X[7]]
X[1]<-X[1]+X[6]
X[1]
6+X[X[11]]
X[2]
X[2]<-X[10]-2
X[1]
install.packages("bookdown")
install.packages("bookdown")
install.packages("bookdown")
install.packages("checkpoint")
install.packages("bookdown")
install.packages("bookdown")
install.packages("bookdown")
install.packages("textir")
uni.slice <- function (x0, g, w=1, m=Inf, lower=-Inf, upper=+Inf, gx0=NULL)
{
logy <- gx0 - rexp(1)
# Find the initial interval to sample from.
u <- runif(1,0,w)
L <- x0 - u
R <- x0 + (w-u)  # should guarantee that x0 is in [L,R], even with roundoff
# Expand the interval until its ends are outside the slice, or until
# the limit on steps is reached.
if (is.infinite(m))  # no limit on number of steps
{
repeat
{ if (L<=lower) break
uni.slice.evals <<- uni.slice.evals + 1
if (g(L)<=logy) break
L <- L - w
}
repeat
{ if (R>=upper) break
uni.slice.evals <<- uni.slice.evals + 1
if (g(R)<=logy) break
R <- R + w
}
}
else if (m>1)  # limit on steps, bigger than one
{
J <- floor(runif(1,0,m))
K <- (m-1) - J
while (J>0)
{ if (L<=lower) break
uni.slice.evals <<- uni.slice.evals + 1
if (g(L)<=logy) break
L <- L - w
J <- J - 1
}
while (K>0)
{ if (R>=upper) break
uni.slice.evals <<- uni.slice.evals + 1
if (g(R)<=logy) break
R <- R + w
K <- K - 1
}
}
# Shrink interval to lower and upper bounds.
if (L<lower)
{ L <- lower
}
if (R>upper)
{ R <- upper
}
# Sample from the interval, shrinking it on each rejection.
repeat
{
x1 <- runif(1,L,R)
uni.slice.evals <<- uni.slice.evals + 1
gx1 <- g(x1)
if (gx1>=logy) break
if (x1>x0)
{ R <- x1
}
else
{ L <- x1
}
}
# Return the point sampled, with its log density attached as an attribute.
attr(x1,"log.density") <- gx1
return (x1)
}
updates <- function (x0, g, reuse=FALSE)
{
uni.slice.calls <<- 0
uni.slice.evals <<- 0
s <<- numeric(ss)
x1 <- x0
s[1] <<- x0
last.g <- NULL
for (i in 2:ss)
{ for (j in 1:thin)
{ if (reuse)
{ x1 <- uni.slice (x1, g, w=w, m=m, lower=lower, upper=upper,
gx0=last.g)
last.g <- attr(x1,"log.density")
}
else
{ x1 <- uni.slice (x1, g, w=w, m=m, lower=lower, upper=upper)
}
}
s[i] <<- x1
}
}
display <- function (r,mu,test)
{
plot(s,type="p",xlab="Iteration",ylab="State",pch=20)
title (paste( test, "  ss =",ss," thin =",thin))
acf (s, lag.max=length(s)/20, main="")
title (paste ("w =",w," m =",m," lower =",lower," upper =",upper))
plot(s[-1],s[-length(s)],pch=20,xlab="Current state",ylab="Next state")
title (paste ("Average number of evaluations:",
round(uni.slice.evals/uni.slice.calls,2)))
qqplot(r,s,pch=".",
xlab="Quantiles from correct sample",
ylab="Quantiles from slice sampling")
abline(0,1)
p.value <- t.test (s[seq(1,length(s),length=200)]-mu) $ p.value
title (paste ("P-value from t test:",round(p.value,3)))
}
ss <- 2000
thin <- 3
w <- 10
m <- Inf
lower <- 0
upper <- +Inf
updates (rexp(1), function (x) -x)
exit
q
g<-function(x){return -x}
g(5)
g<-function(x)
{y<--x
return y
}
g<-function(x){
y<--x
return y
}
g<-function(x){
y<--x
return y
}
g<-function(x){
y<- -x
return y
}
g<-function(x){
y<- -x
return(y)
}
g(5)
updates (rexp(1), g)
ss
install.packages("RSNNS")
library("RSNNS", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
ss <- 2000
thin <- 3
w <- 10
m <- Inf
lower <- 0
upper <- +Inf
g<-function(x){
y<- -x
return(y)
}
updates (rexp(1), g)
uni.slice <- function (x0, g, w=1, m=Inf, lower=-Inf, upper=+Inf, gx0=NULL)
{
logy <- g(x0) - rexp(1)
# Find the initial interval to sample from.
u <- runif(1,0,w)
L <- x0 - u
R <- x0 + (w-u)  # should guarantee that x0 is in [L,R], even with roundoff
# Expand the interval until its ends are outside the slice, or until
# the limit on steps is reached.
if (is.infinite(m))  # no limit on number of steps
{
repeat
{ if (L<=lower) break
uni.slice.evals <<- uni.slice.evals + 1
if (g(L)<=logy) break
L <- L - w
}
repeat
{ if (R>=upper) break
uni.slice.evals <<- uni.slice.evals + 1
if (g(R)<=logy) break
R <- R + w
}
}
else if (m>1)  # limit on steps, bigger than one
{
J <- floor(runif(1,0,m))
K <- (m-1) - J
while (J>0)
{ if (L<=lower) break
uni.slice.evals <<- uni.slice.evals + 1
if (g(L)<=logy) break
L <- L - w
J <- J - 1
}
while (K>0)
{ if (R>=upper) break
uni.slice.evals <<- uni.slice.evals + 1
if (g(R)<=logy) break
R <- R + w
K <- K - 1
}
}
# Shrink interval to lower and upper bounds.
if (L<lower)
{ L <- lower
}
if (R>upper)
{ R <- upper
}
# Sample from the interval, shrinking it on each rejection.
repeat
{
x1 <- runif(1,L,R)
uni.slice.evals <<- uni.slice.evals + 1
gx1 <- g(x1)
if (gx1>=logy) break
if (x1>x0)
{ R <- x1
}
else
{ L <- x1
}
}
# Return the point sampled, with its log density attached as an attribute.
attr(x1,"log.density") <- gx1
return (x1)
}
updates <- function (x0, g, reuse=FALSE)
{
uni.slice.calls <<- 0
uni.slice.evals <<- 0
s <<- numeric(ss)
x1 <- x0
s[1] <<- x0
last.g <- NULL
for (i in 2:ss)
{ for (j in 1:thin)
{ if (reuse)
{ x1 <- uni.slice (x1, g, w=w, m=m, lower=lower, upper=upper,
gx0=last.g)
last.g <- attr(x1,"log.density")
}
else
{ x1 <- uni.slice (x1, g, w=w, m=m, lower=lower, upper=upper)
}
}
s[i] <<- x1
}
}
display <- function (r,mu,test)
{
plot(s,type="p",xlab="Iteration",ylab="State",pch=20)
title (paste( test, "  ss =",ss," thin =",thin))
acf (s, lag.max=length(s)/20, main="")
title (paste ("w =",w," m =",m," lower =",lower," upper =",upper))
plot(s[-1],s[-length(s)],pch=20,xlab="Current state",ylab="Next state")
title (paste ("Average number of evaluations:",
round(uni.slice.evals/uni.slice.calls,2)))
qqplot(r,s,pch=".",
xlab="Quantiles from correct sample",
ylab="Quantiles from slice sampling")
abline(0,1)
p.value <- t.test (s[seq(1,length(s),length=200)]-mu) $ p.value
title (paste ("P-value from t test:",round(p.value,3)))
}
ss <- 2000
thin <- 3
w <- 10
m <- Inf
lower <- 0
upper <- +Inf
g<-function(x){
y<- -x
return(y)
}
updates (rexp(1), g)
updates
res<-updates (rexp(1), g)
hist(res)
res<-updates(rexp(1), g)
hist(res)
re
res
updates <- function (x0, g, reuse=FALSE)
{
uni.slice.calls <<- 100
uni.slice.evals <<- 100
s <<- numeric(ss)
x1 <- x0
s[1] <<- x0
last.g <- NULL
for (i in 2:ss)
{ for (j in 1:thin)
{ if (reuse)
{ x1 <- uni.slice (x1, g, w=w, m=m, lower=lower, upper=upper,
gx0=last.g)
last.g <- attr(x1,"log.density")
}
else
{ x1 <- uni.slice (x1, g, w=w, m=m, lower=lower, upper=upper)
}
}
s[i] <<- x1
}
}
res<-updates(rexp(1), g)
res
ss <- 2000
thin <- 3
w <- 10
m <- Inf
lower <- 0
upper <- +Inf
g<-function(x){
y<- -x
return(y)
}
res<-updates(rexp(1), g)
res
updates <- function (x0, g, reuse=FALSE)
{
uni.slice.calls <<- 100
uni.slice.evals <<- 100
s <<- numeric(ss)
x1 <- x0
s[1] <<- x0
last.g <- NULL
for (i in 2:ss)
{ for (j in 1:thin)
{ if (reuse)
{ x1 <- uni.slice (x1, g, w=w, m=m, lower=lower, upper=upper,
gx0=last.g)
last.g <- attr(x1,"log.density")
}
else
{ x1 <- uni.slice (x1, g, w=w, m=m, lower=lower, upper=upper)
}
}
s[i] <<- x1
}
}
display <- function (r,mu,test)
{
plot(s,type="p",xlab="Iteration",ylab="State",pch=20)
title (paste( test, "  ss =",ss," thin =",thin))
acf (s, lag.max=length(s)/20, main="")
title (paste ("w =",w," m =",m," lower =",lower," upper =",upper))
plot(s[-1],s[-length(s)],pch=20,xlab="Current state",ylab="Next state")
title (paste ("Average number of evaluations:",
round(uni.slice.evals/uni.slice.calls,2)))
qqplot(r,s,pch=".",
xlab="Quantiles from correct sample",
ylab="Quantiles from slice sampling")
abline(0,1)
p.value <- t.test (s[seq(1,length(s),length=200)]-mu) $ p.value
title (paste ("P-value from t test:",round(p.value,3)))
}
ss
res<-updates(rexp(1), g)
res
updates(3,g)
res<-updates(3,g)
res
x0<-rexp(1)
x0
g
uni.slice.calls <<- 100
uni.slice.evals <<- 100
s <<- numeric(ss)
x1 <- x0
s[1] <<- x0
s
s[1] <<- x0
s <<- numeric(ss)
s[1]<-0
s[1]<-x0
s[1]
s <- numeric(ss)
x1 <- x0
s[1] <- x0
last.g <- NULL
for (i in 2:ss)
{ for (j in 1:thin)
{ if (reuse)
{ x1 <- uni.slice (x1, g, w=w, m=m, lower=lower, upper=upper,
gx0=last.g)
last.g <- attr(x1,"log.density")
}
else
{ x1 <- uni.slice (x1, g, w=w, m=m, lower=lower, upper=upper)
}
}
s[i] <<- x1
}
reuse=TRUE
for (i in 2:ss)
{ for (j in 1:thin)
{ if (reuse)
{ x1 <- uni.slice (x1, g, w=w, m=m, lower=lower, upper=upper,
gx0=last.g)
last.g <- attr(x1,"log.density")
}
else
{ x1 <- uni.slice (x1, g, w=w, m=m, lower=lower, upper=upper)
}
}
s[i] <<- x1
}
for (i in 2:ss)
{ for (j in 1:thin)
{ if (reuse)
{ x1 <- uni.slice (x1, g, w=w, m=m, lower=lower, upper=upper,
gx0=last.g)
last.g <- attr(x1,"log.density")
}
else
{ x1 <- uni.slice (x1, g, w=w, m=m, lower=lower, upper=upper)
}
}
s[i] <- x1
}
updates <- function (x0, g, reuse=FALSE)
{
uni.slice.calls <<- 100
uni.slice.evals <<- 100
s <- numeric(ss)
x1 <- x0
s[1] <- x0
last.g <- NULL
for (i in 2:ss)
{ for (j in 1:thin)
{ if (reuse)
{ x1 <- uni.slice (x1, g, w=w, m=m, lower=lower, upper=upper,
gx0=last.g)
last.g <- attr(x1,"log.density")
}
else
{ x1 <- uni.slice (x1, g, w=w, m=m, lower=lower, upper=upper)
}
}
s[i] <- x1
}
}
s
hist(s)
display (rexp(res), 1, "Exponential")
array(NaN,5)
install.packages("png")
install.packages("gridBase")
setwd("~/INAOE/BurnOut")
install.packages("tidyverse")
library(tidyverse)
